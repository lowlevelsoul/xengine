//======================================================================================================================
// CONFIDENTIAL AND PROPRIETARY INFORMATION / NOT FOR DISCLOSURE WITHOUT WRITTEN PERMISSION
// Copyright (C) 2021 James Steele. All Rights Reserved.
//======================================================================================================================

#ifndef __CC_VECTOR3_INL__
#define __CC_VECTOR3_INL__

namespace math {

    //======================================================================================================================
    inline Vec3::Vec3() {
        // Empty - does nothing
    }

    //======================================================================================================================
    inline Vec3::Vec3(const Vec3& rhs) {
        m_x = rhs.m_x;
        m_y = rhs.m_y;
        m_z = rhs.m_z;
        m_pad = 0;
    }

    //======================================================================================================================
    inline Vec3::Vec3(const Vec4 & rhs) {
        Set(rhs);
    }

    //======================================================================================================================
    inline Vec3::Vec3(float x, float y, float z) {
        m_x = x;
        m_y = y;
        m_z = z;
        m_pad = 0;
    }

    //======================================================================================================================
    inline float Vec3::X() const { return m_x; }

    //======================================================================================================================
    inline float Vec3::Y() const { return m_y; }

    //======================================================================================================================
    inline float Vec3::Z() const { return m_z; }

    //======================================================================================================================
    inline float& Vec3::X() { return m_x; }

    //======================================================================================================================
    inline float& Vec3::Y() { return m_y; }

    //======================================================================================================================
    inline float& Vec3::Z() { return m_z; }

    //======================================================================================================================
    inline void Vec3::Set( float x, float y, float z ) {
        m_x = x;
        m_y = y;
        m_z = z;
        m_pad = 0;
    }

    //======================================================================================================================
    inline void Vec3::Set( const Vec4 & rhs ) {
        m_x = rhs.X();
        m_y = rhs.Y();
        m_z = rhs.Z();
        m_pad = 0;
    }
    //======================================================================================================================
    inline Vec3 Vec3::operator-() const {
        return Vec3(-m_x, -m_y, -m_z);
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator=(const Vec3& rhs) {
        m_x = rhs.m_x;
        m_y = rhs.m_y;
        m_z = rhs.m_z;
        m_pad = 0;
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator=(const Vec4& rhs) {
        m_x = rhs.X();
        m_y = rhs.Y();
        m_z = rhs.Z();
        m_pad = 0;
        return *this;
    }

    //======================================================================================================================
    inline float Vec3::Magnitude() const {
        return math::Sqrt(Dot(*this));
    }

    //======================================================================================================================
    inline float Vec3::Normalise(const Vec3& rhs) {
        float mag = rhs.Magnitude();
        float fac = 1.0f / mag;

        *this = rhs * fac;
        return mag;
    }

    //======================================================================================================================
    inline float Vec3::Normalise() {
        return Normalise( *this );
    }

    //======================================================================================================================
    inline float Vec3::Dot(const Vec3& rhs) const {
        return (m_x * rhs.m_x) + (m_y * rhs.m_y) + (m_z * rhs.m_z);
    }

    //======================================================================================================================
    inline void Vec3::Cross(const Vec3& lhs, const Vec3& rhs) {
        m_x = (lhs.m_y * rhs.m_z) - (lhs.m_z * rhs.m_y);
        m_y = (lhs.m_z * rhs.m_x) - (lhs.m_x * rhs.m_z);
        m_z = (lhs.m_x * rhs.m_y) - (lhs.m_y * rhs.m_x);
        m_pad = 0;
    }

    //======================================================================================================================
    inline void Vec3::Mix( const Vec3& from, const Vec3& to, float t ) {
        float tClamped = t;
        *this = (from * (1.0f - tClamped)) + (to * tClamped);
    }

    //======================================================================================================================
    inline void Vec3::Min(const Vec3& lhs, const Vec3& rhs) {
        m_x = std::fmin(lhs.m_x, rhs.m_x);
        m_y = std::fmin(lhs.m_y, rhs.m_y);
        m_z = std::fmin(lhs.m_z, rhs.m_z);
        m_pad = 0;
    }

    //======================================================================================================================
    inline void Vec3::Max(const Vec3& lhs, const Vec3& rhs) {
        m_x = std::fmax(lhs.m_x, rhs.m_x);
        m_y = std::fmax(lhs.m_y, rhs.m_y);
        m_z = std::fmax(lhs.m_z, rhs.m_z);
        m_pad = 0;
    }

    //======================================================================================================================
    inline Vec3 Vec3::operator+( const Vec3& rhs ) const {
        return Vec3( m_x + rhs.m_x,
                        m_y + rhs.m_y,
                        m_z + rhs.m_z );
    }

    //======================================================================================================================
    inline Vec3 Vec3::operator-( const Vec3& rhs ) const {
        return Vec3( m_x - rhs.m_x,
                        m_y - rhs.m_y,
                        m_z - rhs.m_z );
    }

    //======================================================================================================================
    inline Vec3 Vec3::operator*( const Vec3& rhs ) const {
        return Vec3( m_x * rhs.m_x,
                        m_y * rhs.m_y,
                        m_z * rhs.m_z );
    }

    inline Vec3 Vec3::operator/( const Vec3& rhs ) const {
        return Vec3( m_x / rhs.m_x,
                        m_y / rhs.m_y,
                        m_z / rhs.m_z );
    }

    //======================================================================================================================
    inline Vec3 Vec3::operator+( float rhs ) const {
        return *this + Vec3( rhs, rhs, rhs );
    }

    //======================================================================================================================
    inline Vec3 Vec3::operator-( float rhs ) const {
        return *this - Vec3( rhs, rhs, rhs );
    }

    //======================================================================================================================
    inline Vec3 Vec3::operator*( float rhs ) const {
        return *this * Vec3( rhs, rhs, rhs );
    }

    //======================================================================================================================
    inline Vec3 Vec3::operator/( float rhs ) const {
        return *this / Vec3( rhs, rhs, rhs );
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator+=( const Vec3 & rhs ) {
        m_x += rhs.m_x;
        m_y += rhs.m_y;
        m_z += rhs.m_z;
        m_pad = 0;
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator-=( const Vec3 & rhs ) {
        m_x -= rhs.m_x;
        m_y -= rhs.m_y;
        m_z -= rhs.m_z;
        m_pad = 0;
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator*=( const Vec3 & rhs ) {
        m_x *= rhs.m_x;
        m_y *= rhs.m_y;
        m_z *= rhs.m_z;
        m_pad = 0;
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator/=( const Vec3 & rhs ) {
        m_x /= rhs.m_x;
        m_y /= rhs.m_y;
        m_z /= rhs.m_z;
        m_pad = 0;
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator+=( float rhs ) {
        *this += Vec3( rhs, rhs, rhs );
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator-=( float rhs ) {
        *this -= Vec3( rhs, rhs, rhs );
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator*=( float rhs ) {
        *this *= Vec3( rhs, rhs, rhs );
        return *this;
    }

    //======================================================================================================================
    inline Vec3& Vec3::operator/=( float rhs ) {
        *this /= Vec3( rhs, rhs, rhs );
        return *this;
    }
}

#endif
